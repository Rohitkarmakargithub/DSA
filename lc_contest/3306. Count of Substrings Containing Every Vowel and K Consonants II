//we cannot directly use sliding window to this problem, because we might miss some substrings like
// aeiouqqaeoiu  we will miss eiouqqa
//so we will be modifying the problem
//substrings with exactly k consonants= atleast k consonants - atleast k+1 consonants 
class Solution {
public:
    bool isVowel(char ch){
        return ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u';
    }
    long long func(string word,int k){
        long long left=0;
        long long right=0;
        long long n=word.size();
        long long conso=0;
        long long res=0;
        unordered_map<char,int> mp;//to keep track of the vowels 
        //normal sliding window
        while(right<n){
            if(isVowel(word[right])){
                mp[word[right]]++;
            }else{
                conso++;
            }
            while(left<right && mp.size()==5 && conso>=k){//while the sliding window is valid shrink it
                res+=(n-right);//the number of substrings
                if(isVowel(word[left])){
                    mp[word[left]]--;
                    if(mp[word[left]]==0){
                        mp.erase(word[left]);
                    }
                }else{
                    conso--;
                }
                left++;
            }
            right++;
        }
        return res;
    }
    long long countOfSubstrings(string word, int k) {
        return func(word,k)-func(word,k+1);
    }
};
