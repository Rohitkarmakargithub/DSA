class Solution {
public:
    long long maxSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        vector<long long> prefixSum(n + 1, 0);
        for (int i = 0; i < n; i++) 
            prefixSum[i + 1] = prefixSum[i] + nums[i];

        unordered_map<int, long long> mp;
        mp[0] = 0;
        long long maxSum = LLONG_MIN;

        for (int i = 1; i <= n; i++) {
            int mod = i % k;
            if (mp.find(mod) != mp.end()) {
                maxSum = max(maxSum, prefixSum[i] - mp[mod]);
            }

            if (mp.find(mod) == mp.end() || prefixSum[i] < mp[mod]) 
                mp[mod] = prefixSum[i];
        }

        return maxSum;
    }
};
