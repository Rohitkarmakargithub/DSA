#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    double maxAmount(string initialCurrency, vector<vector<string>>& pairs1, vector<double>& rates1, vector<vector<string>>& pairs2, vector<double>& rates2) {
        unordered_map<string, int> currencyIndex;
        int index = 0;

        // Assign a unique index to each currency
        auto getIndex = [&](string& currency) {
            if (currencyIndex.find(currency) == currencyIndex.end())
                currencyIndex[currency] = index++;
            return currencyIndex[currency];
        };

        int n = 0;
        for (int i = 0; i < pairs1.size(); i++) {
            getIndex(pairs1[i][0]);
            getIndex(pairs1[i][1]);
        }
        for (int i = 0; i < pairs2.size(); i++) {
            getIndex(pairs2[i][0]);
            getIndex(pairs2[i][1]);
        }
        n = currencyIndex.size();

        // Create the adjacency matrices for day 1 and day 2
        vector<vector<double>> day1(n, vector<double>(n, 0.0));
        vector<vector<double>> day2(n, vector<double>(n, 0.0));

        // Fill the graph for day 1
        for (int i = 0; i < pairs1.size(); i++) {
            int u = getIndex(pairs1[i][0]);
            int v = getIndex(pairs1[i][1]);
            day1[u][v] = rates1[i];
            day1[v][u] = 1.0 / rates1[i];
        }

        // Fill the graph for day 2
        for (int i = 0; i < pairs2.size(); i++) {
            int u = getIndex(pairs2[i][0]);
            int v = getIndex(pairs2[i][1]);
            day2[u][v] = rates2[i];
            day2[v][u] = 1.0 / rates2[i];
        }

        // Floyd-Warshall for day 1
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    day1[i][j] = max(day1[i][j], day1[i][k] * day1[k][j]);
                }
            }
        }

        // Floyd-Warshall for day 2
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    day2[i][j] = max(day2[i][j], day2[i][k] * day2[k][j]);
                }
            }
        }

        // Calculate the maximum amount of initial currency on Day 1
        int start = getIndex(initialCurrency);
        vector<double> amountAfterDay1(n, 0.0);
        amountAfterDay1[start] = 1.0;

        for (int i = 0; i < n; i++) {
            if (day1[start][i] > 0) {
                amountAfterDay1[i] = 1.0 * day1[start][i];
            }
        }

        // Calculate the maximum amount of initial currency on Day 2
        double maxAmount = 1.0;
        for (int i = 0; i < n; i++) {
            if (amountAfterDay1[i] > 0) {
                double amountOnDay2 = amountAfterDay1[i];
                if (day2[i][start] > 0) {
                    maxAmount = max(maxAmount, amountOnDay2 * day2[i][start]);
                }
            }
        }

        return maxAmount;
    }
};
