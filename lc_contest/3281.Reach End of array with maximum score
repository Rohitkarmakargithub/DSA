// You are given an integer array nums of length n.
// Your goal is to start at index 0 and reach index n - 1. You can only jump to indices greater than your current index.
// The score for a jump from index i to index j is calculated as (j - i) * nums[i].
// Return the maximum possible total score by the time you reach the last index.

// Example 1:

// Input: nums = [1,3,1,5]
// Output: 7

// Explanation:
// First, jump to index 1 and then jump to the last index. The final score is 1 * 1 + 2 * 3 = 7.

// Input: nums = [4,3,1,3,2]
// Output: 16

// Explanation:
// Jump directly to the last index. The final score is 4 * 4 = 16.

class Solution {
public:
    //using greedy algorithm
    long long findMaximumScore(vector<int>& nums) {
        long long res=0;
        int prev=nums[0];
        int prev_index=0;
        int n=nums.size();

        for(int j=1;j<n;j++){
            if(nums[j]>prev){
                res+=(long long)prev*(long long)(j-prev_index);
                prev=nums[j];
                prev_index=j;
            }
        }
        if(prev_index != (n-1)){
            res+=(long long)prev*(long long)((n-1)-prev_index);
        }
        return res;
    }
};
