class TaskManager {
public:
    // Stores taskId -> {userId, priority}
    unordered_map<int, pair<int, int>> taskMap;

    // Priority queue to store {priority, taskId} (max-heap)
    priority_queue<pair<int, int>> pq;

    TaskManager(vector<vector<int>>& tasks) {
        for (auto& task : tasks) {
            int userId = task[0], taskId = task[1], priority = task[2];
            taskMap[taskId] = {userId, priority};
            pq.push({priority, taskId});
        }
    }

    void add(int userId, int taskId, int priority) {
        taskMap[taskId] = {userId, priority};
        pq.push({priority, taskId});
    }

    void edit(int taskId, int newPriority) {
        taskMap[taskId].second = newPriority;
        pq.push({newPriority, taskId});
    }

    void rmv(int taskId) {
        taskMap.erase(taskId); 
    }

    int execTop() {
        while (!pq.empty()) {
            int taskId = pq.top().second;
            int priority = pq.top().first;

            if (taskMap.find(taskId) != taskMap.end() && taskMap[taskId].second == priority) {
                int userId = taskMap[taskId].first; 
                taskMap.erase(taskId); 
                pq.pop();             
                return userId;    
            }
            pq.pop();
        }
        return -1; 
    }
};

/**
 * Your TaskManager object will be instantiated and called as such:
 * TaskManager* obj = new TaskManager(tasks);
 * obj->add(userId,taskId,priority);
 * obj->edit(taskId,newPriority);
 * obj->rmv(taskId);
 * int param_4 = obj->execTop();
 */
