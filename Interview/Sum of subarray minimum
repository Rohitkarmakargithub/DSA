class Solution {
  public:
    int sumSubMins(vector<int> &arr) {
        int n = arr.size();
        vector<int> left(n), right(n);
        stack<int> stk;

        // Previous Less Element (PLE)
        for (int i = 0; i < n; i++) {
            while (!stk.empty() && arr[stk.top()] > arr[i])
                stk.pop();
            left[i] = stk.empty() ? -1 : stk.top();
            stk.push(i);
        }

        while (!stk.empty()) stk.pop();

        // Next Less Element (NLE)
        for (int i = n - 1; i >= 0; i--) {
            while (!stk.empty() && arr[stk.top()] >= arr[i])
                stk.pop();
            right[i] = stk.empty() ? n : stk.top();
            stk.push(i);
        }

        long long sum = 0;
        for (int i = 0; i < n; i++) {
            long long l = i - left[i];
            long long r = right[i] - i;
            sum = (sum + arr[i] * l * r);
        }

        return sum;
    }
};
