class Solution {
public:
    vector<vector<int>> dir{{-1,0},{1,0},{0,1},{0,-1}};

    int bfs(int row, int col, int r, vector<vector<int>>& grid, int n, int m) {
        queue<tuple<int, int, int>> q;
        q.push({row, col, r});

        // Visited array to store {remaining obstacles, visited}
        vector<vector<vector<int>>> vis(n, vector<vector<int>>(m, vector<int>(r+1, 0)));
        vis[row][col][r] = 1;

        int steps = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto [x, y, rem] = q.front();
                q.pop();

                // Check if we reached the destination
                if (x == n - 1 && y == m - 1) 
                    return steps;

                for (int j = 0; j < 4; j++) {
                    int nrow = x + dir[j][0];
                    int ncol = y + dir[j][1];

                    if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m) {
                        int new_r = rem - grid[nrow][ncol];
                        if (new_r >= 0 && !vis[nrow][ncol][new_r]) {
                            vis[nrow][ncol][new_r] = 1;
                            q.push({nrow, ncol, new_r});
                        }
                    }
                }
            }
            steps++;
        }
        return -1;
    }

    int shortestPath(vector<vector<int>>& grid, int k) {
        int n = grid.size();
        int m = grid[0].size();
        return bfs(0, 0, k, grid, n, m);
    }
};


For example, reaching cell (2, 3) with 2 obstacle removals left is not the same as reaching it with 0 removals left.
