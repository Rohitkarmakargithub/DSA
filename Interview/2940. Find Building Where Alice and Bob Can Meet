class Solution {
public:
    vector<int> leftmostBuildingQueries(vector<int>& heights, vector<vector<int>>& queries) {
        int n = heights.size();
        int q = queries.size();
        vector<int> res(q, -1);

        // storeQueries[i] contains {requiredHeight, queryIndex} for queries checking from index i
        vector<vector<pair<int, int>>> storeQueries(n);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq; // {requiredHeight, queryIndex}

        for (int i = 0; i < q; ++i) {
            int a = queries[i][0];
            int b = queries[i][1];

            if (a == b) {
                res[i] = a;
                continue;
            }

            if (a < b && heights[a] < heights[b]) {
                res[i] = b;
                continue;
            }

            if (a > b && heights[a] > heights[b]) {
                res[i] = a;
                continue;
            }

            int maxH = max(heights[a], heights[b]);
            int startIdx = max(a, b);
            storeQueries[startIdx].push_back({maxH, i});
        }

        for (int i = 0; i < n; ++i) {
            for (auto& entry : storeQueries[i]) {
                pq.push(entry);
            }

            while (!pq.empty() && heights[i] > pq.top().first) {
                int queryIndex = pq.top().second;
                res[queryIndex] = i;
                pq.pop();
            }
        }

        return res;
    }
};
