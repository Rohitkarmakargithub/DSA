#include <bits/stdc++.h>
using namespace std;

int n;
vector<vector<int>> overlap;
vector<vector<string>> dp;

int getOverlap(const string &a, const string &b) {
    int max_overlap = min(a.size(), b.size());
    for (int len = max_overlap; len > 0; --len) {
        if (a.substr(a.size() - len) == b.substr(0, len))
            return len;
    }
    return 0;
}

string solve(int last, int mask, vector<string> &words) {
    if (mask == ((1 << n) - 1))
        return words[last];  // base case: return last word

    if (dp[last][mask] != "")
        return dp[last][mask];

    string shortest = string(1000, 'x'); // long string for comparison
    for (int i = 0; i < n; ++i) {
        if ((mask & (1 << i)) == 0) {  // if word i not used
            string next = solve(i, mask | (1 << i), words);
            int olap = overlap[last][i];
            string merged = words[last] + next.substr(olap);
            if (merged.size() < shortest.size())
                shortest = merged;
        }
    }

    return dp[last][mask] = shortest;
}

string shortestSuperstring(vector<string> &words) {
    n = words.size();
    overlap = vector<vector<int>>(n, vector<int>(n, 0));
    dp = vector<vector<string>>(n, vector<string>(1 << n, ""));

    // Precompute overlap between all pairs
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            if (i != j)
                overlap[i][j] = getOverlap(words[i], words[j]);

    string result = "";
    int min_len = INT_MAX;

    for (int i = 0; i < n; ++i) {
        string candidate = solve(i, 1 << i, words);
        if (candidate.size() < min_len) {
            min_len = candidate.size();
            result = candidate;
        }
    }

    return result;
}
