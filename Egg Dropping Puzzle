class Solution {
public:
    int solve(int k, int n, vector<vector<int>>& dp) {
        if(k == 1 || n == 0 || n == 1)
            return n;
        
        if(dp[k][n] != -1)
            return dp[k][n];

        int ans = INT_MAX;
        for(int i = 1 ; i <= n ; i++) {
            int breaks = solve(k - 1, i - 1, dp);
            int notbreaks = solve(k , n - i, dp);

            int worst = 1 + max(breaks, notbreaks);
            ans = min(ans, worst);
        }

        return dp[k][n] = ans;
    }

    int superEggDrop(int k, int n) {
        vector<vector<int>> dp(k + 1, vector<int>(n + 1, -1));
        return solve(k, n, dp);
    }
};


class Solution {
public:
    int solve(int k, int n, vector<vector<int>>& dp) {
        if (k == 1 || n == 0 || n == 1)
            return n;

        if (dp[k][n] != -1)
            return dp[k][n];

        int low = 1, high = n;
        int ans = INT_MAX;

        while (low <= high) {
            int mid = (low + high) / 2;
            int breaks = solve(k - 1, mid - 1, dp);     // Egg breaks
            int notbreaks = solve(k, n - mid, dp);      // Egg doesn't break

            int worst = 1 + max(breaks, notbreaks);
            ans = min(ans, worst);

            if (breaks < notbreaks)
                low = mid + 1;
            else
                high = mid - 1;
        }

        return dp[k][n] = ans;
    }

    int superEggDrop(int k, int n) {
        vector<vector<int>> dp(k + 1, vector<int>(n + 1, -1));
        return solve(k, n, dp);
    }
};
