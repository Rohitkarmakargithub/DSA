class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    //in worst case
    int solve(int n,int k,vector<vector<int>>& dp){
        if(n==1 || k==0 || k==1)
            return k;
            
        if(dp[n][k]!=-1)
            return dp[n][k];
            
        int ans=INT_MAX;
        
        for(int i=1;i<=k;i++){
            int notbreaks = solve(n,k - i,dp);
            int breaks = solve( n - 1,i - 1,dp);
            
            int worst = 1 + max(notbreaks,breaks);
            ans=min(ans,worst);
        }
        
        return dp[n][k]=ans;
    }
    
    int eggDrop(int n, int k) 
    {
        vector<vector<int>> dp(n+1,vector<int>(k+1,-1));
        return solve(n,k,dp);
    }
};
