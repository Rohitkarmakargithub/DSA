class Solution {
public:
    bool canBeValid(string s, string locked) {
        int n = s.size();
        if (n % 2 != 0)
            return false;

        // Forward pass
        int open = 0, wildcard = 0;
        for (int i = 0; i < n; i++) {
            if (locked[i] == '0') {
                wildcard++;
            } else {
                if (s[i] == '(') {
                    open++;
                } else {
                    if (open > 0) {
                        open--; 
                    } else if (wildcard > 0) {
                        wildcard--;
                    } else {
                        return false; 
                    }
                }
            }
        }

        // Backward pass
        int close = 0;
        wildcard = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (locked[i] == '0') {
                wildcard++;
            } else {
                if (s[i] == ')') {
                    close++;
                } else {
                    if (close > 0) {
                        close--; 
                    } else if (wildcard > 0) {
                        wildcard--; 
                    } else {
                        return false; 
                    }
                }
            }
        }

        return true; // If both passes are valid
    }
};
