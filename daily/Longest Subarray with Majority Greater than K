class Solution {
  public:
   int longestSubarray(vector<int>& arr, int k) {
    int n = arr.size();
    unordered_map<int, int> prefixMap; // prefix sum -> first occurrence index
    int prefixSum = 0;
    int maxLength = 0;

    // Initialize with prefix sum 0 at index -1 to handle full length subarrays
    prefixMap[0] = -1;

    for (int i = 0; i < n; i++) {
        // Update prefix sum based on comparison with k
        prefixSum += (arr[i] > k) ? 1 : -1;
        if(prefixSum > 0)  // +1 +1 +1 -1 its valid
            maxLength = i+1;

        // Check if prefixSum - 1 was seen before
        if (prefixMap.find(prefixSum - 1) != prefixMap.end()) {
            int length = i - prefixMap[prefixSum - 1];
            maxLength = max(maxLength, length);
        }

        // Store the first occurrence of the prefix sum
        if (prefixMap.find(prefixSum) == prefixMap.end()) {
            prefixMap[prefixSum] = i;
        }
    }

    return maxLength;
}
};
