# An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous regions.
# Given the grid grid represented as a string array, return the number of regions.
# Note that backslash characters are escaped, so a '\' is represented as '\\'.

# //whenever symbols are there try to represent in terms of 0s 1s.
# //after u represent them in grids of 3*3 ,then use number of islands algorithm 
class Solution {
public:
    # // Function to count regions formed by slashes
    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size(); // Get the size of the grid
        int newSize = n * 3; // We will create a 3 times larger grid

        // Create a new grid initialized to 0
        vector<vector<int>> expandedGrid(newSize, vector<int>(newSize, 0));

        // Fill the new grid based on slashes in the original grid
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '/') {
                    // Mark the path of '/'
                    expandedGrid[i * 3][j * 3 + 2] = 1;
                    expandedGrid[i * 3 + 1][j * 3 + 1] = 1;
                    expandedGrid[i * 3 + 2][j * 3] = 1;
                } else if (grid[i][j] == '\\') {
                    // Mark the path of '\'
                    expandedGrid[i * 3][j * 3] = 1;
                    expandedGrid[i * 3 + 1][j * 3 + 1] = 1;
                    expandedGrid[i * 3 + 2][j * 3 + 2] = 1;
                }
            }
        }

        // Create a visited grid to keep track of visited cells
        vector<vector<int>> visited(newSize, vector<int>(newSize, 0));
        int regions = 0; // Count of regions

        // Go through every cell in the expanded grid
        for (int i = 0; i < newSize; i++) {
            for (int j = 0; j < newSize; j++) {
                // If the cell is not visited and not part of a slash
                if (visited[i][j] == 0 && expandedGrid[i][j] == 0) {
                    // Perform DFS to mark the entire region
                    dfs(i, j, expandedGrid, visited, newSize);
                    regions++; // Increment the count of regions
                }
            }
        }
        
        return regions; // Return the number of regions
    }

private:
    // Separate DFS function to explore the grid
    void dfs(int i, int j, vector<vector<int>>& expandedGrid, vector<vector<int>>& visited, int n) {
        // Check if the current position is out of bounds or already visited or part of a slash
        if (i < 0 || j < 0 || i >= n || j >= n || visited[i][j] == 1 || expandedGrid[i][j] == 1) {
            return; // Stop exploring further
        }

        visited[i][j] = 1; // Mark the current cell as visited

        // Explore the four possible directions (up, down, left, right)
        dfs(i + 1, j, expandedGrid, visited, n); // Down
        dfs(i - 1, j, expandedGrid, visited, n); // Up
        dfs(i, j + 1, expandedGrid, visited, n); // Right
        dfs(i, j - 1, expandedGrid, visited, n); // Left
    }
};
