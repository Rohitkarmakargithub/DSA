class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        vector<vector<int>> dir{{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>,
                       greater<tuple<int, int, int>>> pq;
        int n = heightMap.size();
        int m = heightMap[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));

        for (int row = 0; row < n; row++) {
            pq.push({heightMap[row][0], row, 0});
            vis[row][0] = 1;
            pq.push({heightMap[row][m - 1], row, m - 1});
            vis[row][m - 1] = 1;
        }

        for (int col = 0; col < m; col++) {
            pq.push({heightMap[0][col], 0, col});
            vis[0][col] = 1;
            pq.push({heightMap[n - 1][col], n - 1, col});
            vis[n - 1][col] = 1;
        }

        int result = 0;
        while (!pq.empty()) {
            auto [height, row, col] = pq.top();
            pq.pop();
            for (int i = 0; i < 4; i++) {
                int nrow = row + dir[i][0];
                int ncol = col + dir[i][1];
                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                    !vis[nrow][ncol]) {
                    result += max(0,height - heightMap[nrow][ncol]);
                    vis[nrow][ncol] = 1;
                    pq.push({max(height,heightMap[nrow][ncol]),nrow,ncol});
                }
            }
        }
        return result;
    }
};
