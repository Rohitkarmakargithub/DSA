class Solution {
public:
    int maxEvents(vector<vector<int>>& events) {
        // Sort events by start day
        sort(events.begin(), events.end());
        priority_queue<int, vector<int>, greater<int>> pq;

        int n = events.size();
        int i = 0; 
        int day = 1;
        int count = 0;

        while (!pq.empty() || i < n) {
            // Push all events that start on current day
            while (i < n && events[i][0] == day) {
                pq.push(events[i][1]);
                i++;
            }

            // Remove events that have already expired
            while (!pq.empty() && pq.top() < day) {
                pq.pop();
            }
            
            if (!pq.empty()) {
                pq.pop(); // attend event with earliest end
                count++;
            }

            day++;
        }

        return count;
    }
};
