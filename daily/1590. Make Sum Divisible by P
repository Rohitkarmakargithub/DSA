
//prefix remainder similar as prefix sum where u look if u have found (r - req) anywhere.
class Solution {
public:
    int minSubarray(vector<int>& nums, int p) {
        long long sum = accumulate(nums.begin(), nums.end(), 0LL);
        long long target = sum % p;

        if (target == 0) return 0;

        unordered_map<long long, int> mp;
        mp[0] = -1;

        long long cur_sum = 0;
        long long ans =INT_MAX;

        for (int i = 0; i < nums.size(); i++) {
            cur_sum += nums[i];
            long long cur_rem = (cur_sum % p + p) % p;
            long long needed_rem = (cur_rem - target + p) % p;

            if (mp.find(needed_rem) != mp.end()) {
                ans = min(ans, (long long)i - mp[needed_rem]);
            }

            mp[cur_rem] = i;
        }

        return (ans == nums.size()) ? -1 : ans;
    }
};
