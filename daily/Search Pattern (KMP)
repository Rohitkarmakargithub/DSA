class Solution {
  public:

    // Function to compute the LPS (Longest Prefix Suffix) array
    void computeLPS(string& pat, vector<int>& lps) {
        int m = pat.size();
        int len = 0;  // length of the previous longest prefix suffix
        int j = 1;    // start from the second character

        while (j < m) {
            if (pat[j] == pat[len]) {
                len++;
                lps[j] = len;
                j++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];  // Fall back to the previous LPS length
                } else {
                    lps[j] = 0;
                    j++;
                }
            }
        }
    }

    // Function to search the pattern in the text
    vector<int> search(string& pat, string& txt) {
        int n = txt.size();
        int m = pat.size();
        vector<int> lps(m, 0); // LPS array for the pattern
        vector<int> arr;       // To store the results (found indices)

        // Precompute the LPS array
        computeLPS(pat, lps);

        int i = 0;  // Index for txt
        int j = 0;  // Index for pat

        while (i < n) {
            if (txt[i] == pat[j]) {
                i++;
                j++;
            }

            if (j == m) {  // Pattern found, add the start index to results
                arr.push_back(i - j);
                j = lps[j - 1];  // Get the next possible match from the LPS array
            } else if (i < n && txt[i] != pat[j]) {  // Mismatch
                if (j != 0) {
                    j = lps[j - 1];  // Use LPS to avoid unnecessary comparisons
                } else {
                    i++;
                }
            }
        }

        return arr;
    }
};
