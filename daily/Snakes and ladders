class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        vector<bool> visited(n * n + 1, false);
        queue<int> q;
        q.push(1); // starting from cell 1
        visited[1] = true;

        int steps = 0;

        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                int curr = q.front();
                q.pop();

                if (curr == n * n) return steps;

                for (int move = 1; move <= 6 && curr + move <= n * n; move++) {
                    int next = curr + move;
                    auto [r, c] = getCoordinates(next, n);

                    if (board[r][c] != -1) {
                        next = board[r][c];
                    }

                    if (!visited[next]) {
                        visited[next] = true;
                        q.push(next);
                    }
                }
            }
            steps++;
        }

        return -1;
    }

 
 private:
    pair<int, int> getCoordinates(int num, int n) {
        // Convert from 1D number to 2D board position
        int r = n- (num + n - 1) / n;
        int c = (num - 1) % n;

        // Handle Boustrophedon (zigzag)
        if ((n - r) % 2 == 0) {
            c = n - 1 - c;
        }

        return {r, c};
    }

};
