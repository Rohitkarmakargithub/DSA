class Solution {
  public:
    int dijktra(int src, int des, int V, vector<vector<pair<int, int>>>& adj) {
        vector<int> dist(V, INT_MAX);
        dist[src] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, src});
        while (!pq.empty()) {
            pair<int, int> p = pq.top();
            pq.pop();

            int adjW = p.first;
            int node = p.second;

            for (auto& neigh : adj[node]) {
                int next = neigh.first;
                int weight = neigh.second;
                if ((node == src && next == des) || (node == des && next == src))
                    continue;

                if (dist[node] != INT_MAX && dist[node] + weight < dist[next]) {
                    dist[next] = dist[node] + weight;
                    pq.push({dist[next], next});
                }
            }
        }

        return dist[des];
    }

    int findMinCycle(int V, vector<vector<int>>& edges) {
        int weight_cycle = INT_MAX;

        vector<vector<pair<int, int>>> adj(V);
        for (auto& edge : edges) {
            adj[edge[0]].push_back({edge[1], edge[2]});
            adj[edge[1]].push_back({edge[0], edge[2]});
        }

        for (auto& edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int edge_wt = edge[2];
            int d = dijktra(u, v, V, adj);
            if (d != INT_MAX)
                weight_cycle = min(weight_cycle, edge_wt + d);
        }

        if (weight_cycle == INT_MAX)
            return -1;
        return weight_cycle;
    }
};
