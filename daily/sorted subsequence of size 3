


class Solution {
public:
    vector<int> find3Numbers(vector<int> &arr) {
        int n = arr.size();
        if (n < 3) return {};
        
        vector<int> left(n, -1);
        vector<int> right(n, -1);

        // Track the minimum value and its index from the start
        int mini= arr[0];
        for (int i = 1; i < n; i++) {
            if (arr[i] > mini) {
                left[i] = mini;
            } else {
                mini=arr[i];
            }
        }

        // Track the maximum value and its index from the end
        int maxi = arr[n-1];
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] < maxi) {
                right[i] = maxi;
            } else {
                maxi = arr[i];
            }
        }

        // Now find a triplet (arr[i], arr[j], arr[k]) such that left[j] < arr[j] < right[j]
        for (int i = 0; i < n; i++) {
            if (left[i] != -1 && right[i] != -1) {
                return {left[i], arr[i], right[i]};
            }
        }

        return {}; // No such triplet found
    }
};
