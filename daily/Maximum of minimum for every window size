class Solution {
  public:
    vector<int> maxOfMins(vector<int>& arr) {
        int n = arr.size();
        vector<int> res(n, 0);
        stack<int> stk;
        vector<int> pse(n, -1);
        vector<int> nse(n, n);
        
        // Compute Previous Smaller Element (PSE)
        for(int i=0; i<n; i++){
            while(!stk.empty() && arr[i] <= arr[stk.top()]){
                stk.pop();
            }
            if(!stk.empty()) pse[i] = stk.top();
            stk.push(i);
        }
        
        // Clear stack for next computation
        while(!stk.empty()) stk.pop();
        
        // Compute Next Smaller Element (NSE)
        for(int i=n-1; i>=0; i--){
            while(!stk.empty() && arr[i] <= arr[stk.top()]){
                stk.pop();
            }
            if(!stk.empty()) nse[i] = stk.top();
            stk.push(i);
        }
        
        // Fill the result array
        for(int i=0; i<n; i++){
            int window_size = nse[i] - pse[i] - 1;
            res[window_size - 1] = max(res[window_size - 1], arr[i]);
        }

        // Fill the empty values from right to left
        for(int i=n-2; i>=0; i--){
            res[i] = max(res[i], res[i+1]);
        }
        
        return res;
    }
};
