class Solution {
public:
    int minCost(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> result(n,vector<int>(m,INT_MAX));
        priority_queue<tuple<int,int,int>,vector<tuple<int,int,int>>,greater<tuple<int,int,int>>> pq;
        vector<vector<int>> dir{{0,1},{0,-1},{1,0},{-1,0}};
        result[0][0] = 0;
        pq.push({0,0,0});

        while(!pq.empty()){
            auto [curcost,row,col] = pq.top();
            pq.pop();

            for(int i=0;i<4;i++){
                int newrow = row + dir[i][0];
                int newcol = col + dir[i][1];
                int nextcost = (grid[row][col]-1 != i) ? 1 :0;
                if(newrow>=0 && newrow<n && newcol>=0 && newcol<m){
                    int cost = nextcost+ curcost;
                    if(cost < result[newrow][newcol]){
                        result[newrow][newcol] = cost;
                        pq.push({cost,newrow,newcol});
                    }
                }
            }
        }
        return result[n-1][m-1];
    }
};
