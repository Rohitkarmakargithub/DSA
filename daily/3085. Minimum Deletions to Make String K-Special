class Solution {
public:
    int minimumDeletions(string word, int k) {
        unordered_map<char, int> freq;
        for (char ch : word) {
            freq[ch]++;
        }

        vector<int> counts;
        for (auto& [ch, f] : freq) {
            counts.push_back(f);
        }

        sort(counts.begin(), counts.end());

        int n = counts.size();
        vector<int> prefix(n, 0);
        prefix[0] = counts[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + counts[i];
        }

        int total_min_deletion = INT_MAX;

        for (int i = 0; i < n; i++) {
            int keep = counts[i];
            int max_allowed = keep + k;

            int idx = upper_bound(counts.begin(), counts.end(), max_allowed) - counts.begin();

            int left_sum = (i > 0) ? prefix[i - 1] : 0;
            int right_sum = (idx < n) ? (prefix[n - 1] - prefix[idx - 1]) : 0;
            int right_count = n - idx;

            int deletion = left_sum + (right_sum - right_count * max_allowed);
            total_min_deletion = min(total_min_deletion, deletion);
        }

        return total_min_deletion;
    }
};
