class Solution {
public:
//like optimal strategy of a game we will use game strategy for finding the maximum score of A when both play optimally
    long long solve(int l,int r,vector<int>& nums,vector<vector<long long>>& dp){
        if(dp[l][r]!=-1)    
            return dp[l][r];
        if(l>r)
            return 0;
        if(l==r)
            return nums[l];
        if(r-l==1)
            return max(nums[l],nums[r]);
    
        int left=nums[l] + min(solve(l+2,r,nums,dp),solve(l+1,r-1,nums,dp));
    
        int right=nums[r] + min(solve(l+1,r-1,nums,dp),solve(l,r-2,nums,dp));

        return dp[l][r]=max(left,right);
    }

    bool predictTheWinner(vector<int>& nums) {
        long long total=accumulate(nums.begin(),nums.end(),0ll);
        int n=nums.size();
        vector<vector<long long>> dp(n,vector<long long>(n,-1));
        long long A=solve(0,n-1,nums,dp);
        long long B=total-A;
        return A>=B;
    }
};
